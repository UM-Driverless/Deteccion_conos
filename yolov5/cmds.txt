PAQUETE YOLOV5 https://github.com/ultralytics/yolov5

1. La ruta de los archivos de YOLOv5 es (puede acceder cualquiera con el user usuario):
/home/usuario/dhernandez/yolov5/

2. Activar el entorno con lo de bajo o instalar requirements.txt en un nuevo entorno
source yolov5-venv/bin/activate

3. Para entrenar, esta sería un comando base
python train.py --batch 32 --epochs 100 --data ../Sohas_weapon-Detection-YOLOv5/dataset.yaml --weights yolov5n.pt --name yolov5n-weapons --imgsz 800 --patience 10 --exist-ok --device 3

4. Flags
--weights O yolov5n.pt que son los pesos base o la ruta a los pesos de la red que se quiere
--name Nombre de la carpeta donde se guardará dentro de /runs/train/
--imgsz 800 Tamaño de entrada al que se reescala
--patience 10 Condición de parada (iteraciones sin mejora)
--exist-ok Para que pueda sobreescribir si ya tiene ese nombre
--device 3 GPU donde se entrenará
--single-cls Para indicar que solo se quiere entrenar una clase con el nuestro
--hyp ../yolov5/data/hyps/hyp.finetune.yaml Para finetune

5. Las rutas de los datasets de MIT y el nuestro son
/home/usuario/dhernandez/data/MIT/
/home/usuario/dhernandez/data/Cone_mixed_dataset/

6. Para probar existe el detect.py (ejecuta y puedes guardar las detecciones en un archivo) y el val.py (saca métricas y cosas)

7. Para cargar el modelo (se puede ver ejemplo de código entero en cam.py)
model = torch.hub.load('.', 'custom', path='weights/best.pt', source='local', force_reload=True)
y hace falta tener en local:

hubconf.py
export.py
weights (o cualquier carpeta donde estén los pesos)
utils
models (que esté yolov5s.yaml)

8. Para lanzar en la Xavier
https://blog.roboflow.com/deploy-yolov5-to-jetson-nx/

Instalar pytorch con el paquete 
https://ngc.nvidia.com/catalog/containers/nvidia:l4t-pytorch

y los requirements
